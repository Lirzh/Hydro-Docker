name: Version Check and Release

on:
  schedule:
    - cron: '0 1 * * *'  # 每天UTC时间凌晨运行（注意：GitHub Actions 的定时触发始终基于 UTC，此处统一在 job 中设置了 TZ 环境变量为 Asia/Shanghai）
  workflow_dispatch:     # 允许手动触发

jobs:
  check-release:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai   # 设置时区为 Asia/Shanghai
    permissions:
      contents: write   # 允许创建 release 和推送代码

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Extract version from SVG
      id: version-extract
      run: |
        # 下载并解析 SVG 文件以提取版本号
        curl -s -o version.svg https://img.shields.io/npm/v/hydrooj?label=hydrooj
        VERSION=$(grep -oP 'aria-label="hydrooj: \K(v\d+\.\d+\.\d+)' version.svg)
        
        if [ -z "$VERSION" ]; then
          echo "::error::Version extraction failed"
          exit 1
        fi
        
        echo "Extracted version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Get latest release
      id: check-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 通过 GitHub API 获取最新的 release 信息
        RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest")
        
        if echo "$RESPONSE" | grep -q '"tag_name":'; then
          LATEST_TAG=$(echo "$RESPONSE" | sed -n 's/.*"tag_name": "\([^"]*\)".*/\1/p')
        else
          LATEST_TAG=""
        fi
        
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Current latest release: $LATEST_TAG"

    - name: Create New Release
      if: steps.version-extract.outputs.version != steps.check-release.outputs.latest_tag
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version-extract.outputs.version }}
        release_name: ${{ steps.version-extract.outputs.version }}
        body: |
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.version-extract.outputs.version }}
        draft: false
        prerelease: false

    - name: Update README.md with new build date and version
      if: steps.version-extract.outputs.version != steps.check-release.outputs.latest_tag
      run: |
        # 获取当前日期（Asia/Shanghai 时区下）
        CURRENT_DATE=$(date +'%Y-%m-%d')
        echo "当前日期: $CURRENT_DATE"
        # 修改 README.md 中对应的构建日期和版本号
        # 正则中匹配形如 "镜像构建日期 YYYY-MM-DD ，Hydro vX.Y.Z" 的格式
        sed -i -E "s/(镜像构建日期 )[0-9]{4}-[0-9]{2}-[0-9]{2}( ，Hydro )v[0-9]+\.[0-9]+\.[0-9]+/\1$CURRENT_DATE\2${{ steps.version-extract.outputs.version }}/" README.md
        echo "更新后的 README.md 内容："
        cat README.md

    - name: Commit and Push README.md update
      if: steps.version-extract.outputs.version != steps.check-release.outputs.latest_tag
      run: |
        # 配置 Git 用户信息
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        # 拉取远程仓库最新提交并变基到本地（也可以使用 git pull --rebase）
        git pull --rebase origin ${{ github.ref }}
        # 添加并提交 README.md 文件的更新
        git add README.md
        git commit -m "Update README with new build date and version: ${{ steps.version-extract.outputs.version }}"
        # 推送到远程仓库
        git push origin HEAD:${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Push the tag to GitHub
      if: steps.version-extract.outputs.version != steps.check-release.outputs.latest_tag
      run: |
        git tag ${{ steps.version-extract.outputs.version }}
        git push origin ${{ steps.version-extract.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
